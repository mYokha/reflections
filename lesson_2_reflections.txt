What happens when you initialize a repository? Why do you need to do it?

	Git creates an empty repo. This is the start of our work with Git

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	Well, staging area is an area after having just a bunch of files in your
	working directory but before making a commit. It offers some flexibility.
	Like in case when oyu do not want all your files to be added to commit, you
	can choose the ones you are about to commit by adding them to the staging
	area.

How can you use the staging area to make sure you have one commit per logical
change?

	It is useful because we can use git diff --staged command to see differences
	between staged files and commited files. Understanding the difference we can
	find out were the differences serious (logical) enough or not. If yes, then 
	we make a commit, if not then we go back to changing file, adding it to
	the staging area, then comparing with the most recent comit and so on.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	If we have some experimental features we'd like to try out or some bugs to
	fix it is very useful to create a branch.

How do the diagrams help you visualize the branch structure?

	The visual part is awesome. It helped me a lot!

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
	
	The result is the commit including the combined changes from both branches.
	It's hard to understand how the merge works so graphically it becmes a bit
	easier. More importantly, we can see at every commit which commits are
	reachable.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
	
	Automatic merging makes it easy and fast but it also can miss some bugs or
	errors. Manual merging gives flexibility but takes some time.